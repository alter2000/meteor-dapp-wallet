{
    "elements": {
        "selectGasPrice": {
            "high": "Më shpejt",
            "low": "Më lirë"
        },
        "checksumAlert":"Kjo adresë duket e vlefshme, por nuk ka disa masa sigurie që ju mbrojnë nga gabimet e shtypjes, kështu që duhet të siguroheni që kjo është adresa e duhur. Nëse e keni, kontrolloni nëse ikona e sigurisë përputhet.",
        "identiconHelper": "Kjo është një ikonë sigurie; nëse ka ndonjë ndryshim në adresë ikona e përftuar do të ishte krejt tjetër"
    },
    "wallet": {
        "app": {
            "buttons": {
                "wallet": "Kuletat",
                "send": "Dërgo",
                "contracts": "Kontratat",
                "deploy": "Fut në fuqi",
                "tokens": "Valuta",
                "receive": "Merr",
                "addWallet": "Shto kontratë kulete",
                "addAccount": "Shto llogari",
                "addToken": "Vëzhgo vlerën"
            },
            "texts": {
                "note": "Shënim",
                "balance": "Balanca",
                "connectionErrorMist": "Nuk mund të lidhet. Ju lutemi të nisni geth duke përdorur:<br><br><small><code>__node__</code><br><br>Sigurohuni që vendndodhja e IPC të jetë ajo e parazgjedhur, nëse përdoret <code>datadir</code> e ndryshme, p.sh.<br><code>geth --datadir ... --ipcpath /Users/&lt;perdoruesiJuaj&gt;/Library/Ethereum/geth.ipc</code><br>or<br><code>geth --datadir ... --ipcpath /Users/&lt;perdoruesiJuaj&gt;/.ethereum/geth.ipc</code>. <br><br>Sipas dëshirës shtoni: <code>--unlock &lt;llogariaJuaj&gt;.</code></small>",
                "connectionErrorBrowser": "Nuk mund të lidhet. Ju lutemi të nisni geth duke përdorur:<br><br><small><code>__node__</code><br><br>Sipas dëshirës shtoni: <code>--unlock &lt;llogariaJuaj&gt;.</code></small>",
                "pendingConfirmationsBadge": "Duke pritur konfirmim!",
                "nodeSyncing": "__blockDiff__ blloqe të mbetura",
                "blockReceived": "U mor bllok i ri",
                "timeSinceBlock": "nga blloku i fundit",
                "peers": "miq",
                "waitingForBlocks": "Duke pritur blloqe..",
                "testnetExplain": "Jeni në rrjetin test, MOS DËRGONI Ether të vërtetë drejt këtyre adresave",
                "noAccounts": {
                  "title": "Nuk keni ende llogari",
                    "text": "Duhet të krijoni të paktën një llogari me fjalëkalim të fortë."
                }
            },
            "error": {
                "wrongChain": "Duket se jeni në zinxhir tjetër. Ju lutemi të rihapni aplikacionin e kuletës Ethereum!"
            },
            "warnings": {
                "txOriginVulnerabilityWallet": "Kuleta e kësaj kontrate të zgjuar ka kod të papërditësuar dhe mund të jetë subjekt i sulmeve të vjedhjes së identitetit. ",
                "txOriginVulnerabilityCallToAction": "Përditësoni kontratën tuaj tani dhe transferoni fondet në versionin e përditësuar.",
                "txOriginVulnerabilityAccount": "Kjo llogari është pronare e një kontrate të cenueshme kulete. Përdorimi i kësaj llogarie në kontrata keqdashëse mund të rrezikojë fondet e kuletës suaj. Përditësojeni kuletën para se të kryeni ndonjë transaksion me këtë llogari.",
                "txOriginVulnerabilityPopup": "Gjetëm kuleta të cenueshme! Sigurohuni të krijoni kuleta të reja dhe të zhvendosni fondet!",
                "checkThisNow": "Shfaq kuletën e cenueshme",
                "checkThisLater": "Më vonë",
                "learnMore": "Mëso më shumë rreth këtij problemi"
            }
        },
        "modals": {
            "selectAccount": {
                "title": "Zgjidhni një llogari"
            },
            "testnetWallet": {
                "walletNeedsDeployment": "Duket se ndodheni në një rrjet provë.<br><br>Nuk u gjet kod origjinal kontrate. Duhet ta krijojmë një, i cili mund të përdoret nga kontratat cungje, nga adresa juaj: <br><br><small><code>__account__</code></small><br><br><em>Ju lutemi sigurohuni që kjo adresë ka të paktën 1 Ether!</em>",
                "testnetWalletDeployed": "Kontrata origjinale e kuletës u vendos!<br>Një kontratë origjinale kulete u vendos në adresën:<br><br><small><code>__address__</code></small>."
            },
            "addToken": {
                "title": "Shto valutë",
                "titleEdit": "Redakto valutë",
                "contractAddress": "Adresa e kontratës së valutës",
                "tokenName": "Emri i valutës",
                "tokenSymbol": "Simboli i valutës",
                "decimalPlaces": "Shifra pas presjes dhjetore që i takojnë njësisë më të vogël",
                "preview": "Paraqit"
            },
            "interface": {
                "title": "Ndërfaqja JSON e kontratës",
                "description": "Nëse doni që dikush tjetër ta ekzekutojë këtë kontratë, dërgojeni këtë informacion së bashku me adresën e kontratës."
            }
        },
        "accounts": {
            "title": "Paraqitje e <strong>Llogarive</strong>",
            "walletsTitle": "Kontrata kulete",
            "accountsTitle": "Llogaritë",
            "defaultName": "Pa emër",
            "creating": "Duke krijuar",
            "importing": "Duke marrë",
            "accountNote": "Llogaritë nuk mund të tregojnë transaksionet hyrëse, por mund të ruajnë, mbajnë dhe dërgojnë Ether. Për të parë transaksionet ardhëse <a href=\"/account/new\">krijoni një kontratë kulete</a> për të ruajtur ether.",
            "outOfSyncNote": "Nëse balanca e llogarisë nuk duket e përditësuar, sigurohuni që jeni të sinkronizuar me rrjetin.",
            "walletNote": "Most exchanges don't support receiving ether from a contract wallet yet. Be sure to move your balance to an account address first!",
            "addressCopiedToClipboard": "Copied to clipboard",
            "addressNotCopiedToClipboard": "Error copying address to clipboard. Please try again.",
            "qrCodeLabel": "Point a compatible mobile app to this code",
            "dailyLimit": "Daily limit",
            "dailyLimitRemaining": "remaining today",
            "requiredSignatures": "Required signatures",
            "owners": "Owners",
            "walletsDescription": "These contracts are stored on the blockchain and can hold and secure Ether. They can have multiple accounts as owners and keep a full log of all transactions.",
            "walletsDescriptionNotEnoughFunds": "Once you have more than 1 Ether you can create more sophisticated contracts. Wallets are smart contracts that allow your funds to be controlled by multiple accounts.  They can have an optional daily limit on withdrawals to increase security.  Create your own custom contracts on the <em>Contracts</em> tab.",
            "accountsDescription": "Accounts are password protected keys that can hold Ether and Ethereum-based tokens.  They can control contracts, but can't display incoming transactions.",
            "buttons": {
                "deposit": "Transfer Ether & Tokens",
                "depositBitcoin": "Fund with Bitcoin",
                "depositUsingCreditCard": "Fund with a Credit Card (U.S. only)",
                "viewOnExplorer": "View on Etherscan",
                "copyAddress": "Copy address",
                "scanQRCode": "Show QR-Code",
                "showInterface": "Show Interface"
            },
            "modal": {
                "deleteText": "Do you really want to delete this wallet contract? If you don't separately track it and its private key, you may not be able to find it on the blockchain and will lose access to any funds deposited<br><br> Type \"delete\" confirm the deletion.",
                "backupWallet": {
                    "title": "Backup your wallet contract address!",
                    "description": "Make sure to write down the wallet contract address:"
                },
                "copyAddressWarning": "<strong>Warning:</strong> you are on the Test Network. Be careful not to transfer real funds to this account.",
                "buttonOk": "Copy anyway",
                "buttonCancel": "Nevermind.."
            }
        },
        "events": {
            "eventInfoTitle": "Event",
            "latest": "Latest events",
            "filter": "Filter events",
            "transactionHash": "Transaction hash",
            "block": "Block",
            "originContract": "Origin contract",
            "logIndex": "Log index",
            "transactionIndex": "Transaction index",
            "returnValues": "Return values",
            "eventName": "Event name"
        },
        "transactions": {
            "transactionInfoTitle": "Transaction",
            "latest": "Latest transactions",
            "block": "Block",
            "pendingConfirmations": "Confirmation needed",
            "none": "No transactions yet",
            "time": "Time",
            "from": "From",
            "to": "To",
            "amount": "Amount",
            "gasPrice": "Gas price",
            "perMillionGas": " PER MILLION GAS",
            "gasUsed": "Gas used", 
            "feePaid": "Fee paid",
            "data": "Send data",
            "deployedData": "Deployed data",
            "confirmations": "Confirmations",
            "unconfirmed": "Unconfirmed",
            "showMore": "Show More",
            "filter": "Filter transactions",
            "noneFound": "No matching transaction found.",
            "noOwnerAccount": "Watch only confirmation",
            "outOfGasDesc": "The transaction didn't seem to have enough gas to execute.",
            "buttons": {
                "approve": "Approve",
                "approved": "Approved",
                "revoke": "Revoke",
                "revoked": "Revoked"
            },
            "error": {
                "noDataDeployed": "No data is deployed on the contract address!",
                "outOfGas": "The transaction from __from__ to __to__ couldn't be successfully executed."  
            },
            "types": {
                "executeContract": "Contract execution",
                "betweenWallets": "Transfer between accounts",
                "sent": "Sent",
                "received": "Received",
                "outOfGas": "Transaction not executed",
                "createdContract": {
                    "title": "Created contract",
                    "at": "Created contract at"
                },
                "creatingContract": "Creating contract",
                "tokenTransfer": "__token__ - Token transfer",
                "pendingConfirmations": "__initiator__ wants to send from __from__"
            },
            "notifications": {
                "incomingTransaction": {
                    "title": "Payment received",
                    "text": "You received __amount__ on __to__ from __from__."
                },
                "outgoingTransaction": {
                    "title": "Payment sent",
                    "text": "You sent __amount__ from __from__ to __to__."    
                },
                "pendingConfirmation": {
                    "title": "Confirmation needed",
                    "text": "__initiator__ wants to send __amount__ from __from__ to __to__"
                },
                "tokenTransfer": {
                    "title": "__token__ - Token transfer",
                    "text": "__amount__ __token__ were sent from __from__ to __to__."
                }
            }
        },
        "newWallet": {
            "title": "New <strong>wallet contract</strong>",
            "accountName": "Wallet contract name",
            "selectOwner": "Select owner",
            "accountType": {
                "title": "Wallet contract type",
                "simple": {
                    "title": "Single owner account",
                    "description": "A simple contract without additional security measures.",
                    "warning": "Note: If your owner account is compromised, your wallet has no protection."
                },
                "multisig": {
                    "title": "Multisignature wallet contract",
                    "description": "A contract controlled by multiple accounts",
                    "text1": "This is a joint account controlled by",
                    "text2": "owners. You can send up to",
                    "text3": "Ether per day.",
                    "text4": "Any transaction over that daily limit requires the confirmation of",
                    "text5": "owners.",
                    "accountOwnersTitle": "Account owners",
                    "ownerAddress": "Owner address"
                },
                "import": {
                    "title": "Import wallet",
                    "description": "Import an existing (multisignature) wallet.",
                    "walletAddress": "Wallet address",
                    "youreOwner": "Your \"__account__\" account is an owner of this wallet contract.",
                    "watchOnly": "You don't own the account, but you can add it as a \"WATCH ONLY\" account.",
                    "notWallet": "This address has no wallet contract."
                }
            },
            "error": {
                "emptySignees": "You didn't provided all owners.",
                "alreadyExists": "Wallet contract already exists.",
                "stubHasNoOrigWalletAddress": "Your stub contract has no original account address set.  Please restart your App!",
                "contractsCantBeOwners": "Contracts can't be owners.",
                "checkOwnerAddress": "Please change the contract address __address__ to an account."
            }
        },
        "send": {
            "title": "<strong>Send</strong> funds",
            "sendInfoTitle": "Send",
            "pickAddress": "Pick an address",
            "to": "To",
            "from": "From",
            "amount": "Amount",
            "tokenAmount": "Token amount",
            "sendFunds": "Send funds",
            "deployContract": "Deploy contract",
            "data": "Data",
            "moreOptions": "More options",
            "showMoreOptions": "Show more options",
            "showLessOptions": "Show fewer options",
            "fee": "Select Fee",
            "feeLow": "Cheaper",
            "feeHigh": "Faster",
            "addData": "Add data",
            "sendAll": "Send everything",
            "removeData": "Remove data",
            "estimatedFee": "Estimated fee",
            "createContract": "Create contract",
            "provideGas": "Provide gas",
            "transactionSent": "Transaction sent",
            "error": {
                "emptyWallet": "The account you want to send from is empty.",
                "notEnoughFunds": "You don't have enough funds in the account.",
                "noReceiver": "You didn't specify a receiver.",
                "noAmount": "You didn't specify an amount to send."
            },
            "texts": {
                "ownerPaysGas": "Gas is paid by the owner of the wallet contract",
                "sendAmount": "You want to send <strong>__amount__</strong>.",
                "sendAmountEquivalent": "You want to send <strong>__amount__</strong> in Ether, using exchange rates from <a href=\"https://www.cryptocompare.com/coins/eth/overview/BTC\" target=\"_blank\">cryptocompare.com</a>.<br>Which is currently an equivalent of <strong>__etherAmount__</strong>.",
                "sendToken": "You want to send <strong>__amount__ __symbol__</strong> of <strong> __name__</strong>.",
                "overDailyLimit": "<p class=\"over-daily\">This amount is over the remaining daily limit of __limit__ (of __total__ per day), so you need __count__ other account to confirm.</p>",
                "overDailyLimit_plural": "<p class=\"over-daily\">This amount is over the remaining daily limit of __limit__ (of __total__ per day), so you need __count__ other accounts to confirm.</p>",
                "underDailyLimit": "<p class=\"under-daily\">This amount is under the remaining daily limit of __limit__ (of __total__ per day), means it will send immediately.</p>",
                "sendFee": "This is the most amount of money that might be used to process this transaction. Your transaction will be mined <strong>__timetext__</strong>.",
                "noCodeInRecipient": "The recipient account is not a contract, so you can't execute anything. <strong> Put a contract address on the 'TO' field. </strong>",
                "addData": "You can add extra data to send along with your transaction. If you don't know what this is then <strong>don't touch it or bad things may happen</strong>.",
                "dataNotExecutable": "The data seems not to be executabe, that means this transaction will use all the gas you provide.",
                "cantEstimateGas": "We can't estimate your gas usage properly, as you need at least 1 Ether in your account.",
                "estimatedGas": "Estimated required gas",
                "timeTexts": {
                    "0": "in a few minutes or more",
                    "1": "likely within a few minutes",
                    "2": "usually within a minute",
                    "3": "probably within 30 seconds",
                    "4": "probably within a few seconds",
                    "5": "probably within a few seconds"
                }
            }
        },
        "tokens": {
            "title": "Custom <strong>Tokens</strong>",
            "subTitle": "Added tokens",
            "admin": "__name__ (admin page)",
            "description": "Tokens are currencies and other fungibles built on the Ethereum platform. In order for accounts to watch for tokens and send them, you have to add their address to this list. You can create your own token by simply modifying <a href=\"https://ethereum.org/token#the-code\" target=\"_blank\">this example of a custom token contract</a> or learning more about <a href=\"https://www.ethereum.org/token\" target=\"_blank\">Ethereum Tokens</a>.",
            "deleteToken": "Do you want to remove the token <strong>__token__</strong> from your list?",
            "addedToken": "Added __token__ to your watch list",
            "editedToken": "Edited token __token__",
            "error": {
                "invalidAddress": "Token not added.  Invalid address."
            }
        },
        "contracts": {
            "contractTitle" : "Contracts",
            "deployNewContract": "Deploy new contract",
            "addCustomContract": "Watch contract",
            "customContracts": "Custom contracts",
            "description": "To watch and interact with a contract already deployed on the blockchain, you need to know its address and the description of its interface in JSON format.",
            "deployContract": "<strong>Deploy</strong> contract",
            "contractSourceCode": "Solidity contract source code",
            "contractByteCode": "Contract byte code",
            "selectContract": "Select contract to deploy",
            "constructorParameters": "Constructor parameters",
            "name": "Contract name",
            "address": "Contract address",
            "jsonInterface": "JSON Interface",
            "contractInformation": "Contract information",
            "addedContract": "Added custom contract",
            "readFromContract": "Read from contract",
            "writeToContract": "Write to contract",
            "pickContract": "Pick a contract",
            "pickFunction": "Pick a function",
            "noContract": "<p>Put the source of the contract you want here. You can find many examples of contracts at the <a href=\"http://ethereum.org\" target=\"_blank\">ethereum.org</a>: </p> <ul><li><a href=\"http://ethereum.org/token#the-code\" target=\"_blank\">Build a token</a></li><li><a href=\"http://ethereum.org/crowdsale#the-code\" target=\"_blank\">Start a crowdsale</a></li><li><a href=\"http://ethereum.org/dao#the-code\" target=\"_blank\">Create a blockchain organization</a></li></ul>",
            "buttons": {
                "showContractInfo": "Show contract info",
                "hideContractInfo": "Hide contract info",
                "watchContractEvents": "Watch contract events",
                "execute": "Execute",
                "yes": "Yes"
            },
            "error": {
                "compile": "Could not compile source code.",
                "noDataProvided": "No data found: select a contract from the 'select contract' menu",
                "invalidAddress": "This is not a valid address.",
                "jsonInterfaceParseError": "Couldn't parse the JSON Interface."
            }
        }
    }
}
